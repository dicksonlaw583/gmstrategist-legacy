<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
{
// Parameters
ruleset = undefined;
configs = undefined;
text_gameset = undefined;
max_playout_plies = undefined;
max_playout_ms = undefined;
max_eval_playouts = undefined;
max_eval_ms = undefined;
ai_output = undefined;
ai_verbose = undefined;

// Data
tree = undefined;
state = undefined;
state_pickle = undefined;
current_player = undefined;
current_agency = undefined;
move = undefined;
input = "";
recommendation = "";
evaluation_daemon = noone;
hint_tree = undefined;
hint_evaluation_daemon = noone;

// Controls
mh_ai_thinks = -1;
mh_new_game = -1;
mh_hint = -1;
mh_illegal = -1;
mh_winner = -1;
ih_input = -1;
qh_replay = -1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check main tree daemon
{
if (evaluation_daemon != noone &amp;&amp; evaluation_daemon.ready) {
  move = mcts_get_best_move(tree);
  switch (ai_output) {
    // Asynchronous means of reporting: Wait for response first
    case TEXT_OUTPUT.MESSAGE_ASYNC:
    case TEXT_OUTPUT.COPYABLE_MESSAGE_ASYNC:
      if (ai_verbose) {
        mh_ai_thinks = gmst_output(ai_output, script_execute(text_gameset[TEXT_GAMESET.SCR_STATE_DISPLAY], state) + lflf + "Chosen move: " + script_execute(text_gameset[TEXT_GAMESET.SCR_MOVE_OUTPUT], move) + lflf + mcts_output_ranked_moves(tree, text_gameset, TEXT_OUTPUT.STRING, ai_verbose));
      } else {
        mh_ai_thinks = mcts_output_ranked_moves(tree, text_gameset, ai_output, ai_verbose);
      }
      break;
    // Synchronous means of reporting: Apply move right away
    default:
      if (ai_verbose) {
        gmst_output(ai_output, script_execute(text_gameset[TEXT_GAMESET.SCR_STATE_DISPLAY], state) + lflf + "Chosen move: " + script_execute(text_gameset[TEXT_GAMESET.SCR_MOVE_OUTPUT], move) + lflf + mcts_output_ranked_moves(tree, text_gameset, TEXT_OUTPUT.STRING, ai_verbose));
      } else {
        mcts_output_ranked_moves(tree, text_gameset, ai_output, ai_verbose);
      }
      event_user(1);
  }
  with (evaluation_daemon) instance_destroy();
  evaluation_daemon = noone;
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check hint tree daemon
{
if (hint_evaluation_daemon != noone &amp;&amp; hint_evaluation_daemon.ready) {
  recommendation = script_execute(text_gameset[TEXT_GAMESET.SCR_MOVE_OUTPUT], mcts_get_best_move(hint_tree));
  mh_hint = show_message_async(script_execute(text_gameset[TEXT_GAMESET.SCR_STATE_DISPLAY], state) + chr(10) + chr(10) + "Suggested Move: " + recommendation + chr(10) + chr(10) + mcts_output_ranked_moves(hint_tree, text_gameset, TEXT_OUTPUT.STRING, true));
  with (hint_evaluation_daemon) instance_destroy();
  hint_evaluation_daemon = noone;
  hint_tree[MCTS_TREE.ROOT] = undefined;
  hint_tree = undefined;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle mh_ai_thinks
if (async_load[? "id"] == mh_ai_thinks) {
  mh_ai_thinks = -1;
  // Go back to apply the move
  event_user(1);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle mh_new_game
if (async_load[? "id"] == mh_new_game) {
  mh_new_game = -1;
  // Ask for a move
  event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle mh_hint
if (async_load[? "id"] == mh_hint) {
  mh_hint = -1;
  // Go back to asking for a move
  event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle mh_illegal
if (async_load[? "id"] == mh_illegal) {
  mh_illegal = -1;
  // Go back to asking for a move
  event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle mh_winner
if (async_load[? "id"] == mh_winner) {
  mh_winner = -1;
  // Play again?
  qh_replay = show_question_async("Play again?");
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle ih_input
if (async_load[? "id"] == ih_input) {
  ih_input = -1;
  // Not cancelled
  if (async_load[? "status"]) {
    input = async_load[? "result"];
    // Special commands
    switch (string_lower(input)) {
      // Create a new tree and come up with a hint
      case ":hint":
        // Only one move, make that clear
        var available_moves = script_execute(ruleset[RULESET.SCR_GENERATE_MOVES], state);
        if (array_length_1d(available_moves) == 1) {
          recommendation = script_execute(text_gameset[TEXT_GAMESET.SCR_MOVE_OUTPUT], available_moves[0]);
          mh_hint = show_message_async("You have only one move: " + recommendation);
        }
        // Multiple moves, create a tree
        else {
          hint_tree = MctsTree(state, ruleset, configs);
          hint_evaluation_daemon = mcts_evaluate_in_background(hint_tree, max_playout_plies, max_playout_ms, max_eval_playouts, max_eval_ms);
        }
        exit;
      // Restart with the same opening game state
      case ":restart":
        event_user(15); // Cleanup
        state = script_execute(ruleset[RULESET.SCR_DECODE], state_pickle);
        tree = MctsTree(state, ruleset, configs);
        mh_new_game = show_message_async("Game restarted:" + chr(10) + chr(10) + script_execute(text_gameset[TEXT_GAMESET.SCR_STATE_DISPLAY], state) + chr(10) + chr(10) + script_execute(text_gameset[TEXT_GAMESET.SCR_PLAYER_NAME], script_execute(ruleset[RULESET.SCR_CURRENT_PLAYER], state)) + " plays first.");
        exit;
      // Start a new game with a new game state
      case ":newgame":
        event_user(15); // Cleanup
        event_user(14); // Start new game
        exit;
      // Finish playing without ending game
      case ":finish":
        event_user(15); // Cleanup
        instance_destroy();
        exit;
      // Finish playing and end game
      case ":quit":
        event_user(15); // Cleanup
        instance_destroy();
        game_end();
        exit;
    }
    // Attempt to convert the move from the input
    move = script_execute(text_gameset[TEXT_GAMESET.SCR_MOVE_INPUT], input);
    // If not a valid move, ask again
    if (is_undefined(move)) {
      event_user(0);
      exit;
    }
    // If valid move, break off if the move is illegal
    if (!is_undefined(move) &amp;&amp; !script_execute(ruleset[RULESET.SCR_IS_LEGAL], state, move)) {
      mh_illegal = show_message_async("That move is illegal.");
      exit;
    }
    // Apply the move to the state
    event_user(1);
  }
  // Cancelled, retry
  else {
    event_user(0);
  }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle qh_replay
if (async_load[? "id"] == qh_replay) {
  qh_replay = -1;
  if (async_load[? "status"]) {
    event_user(14);
  } else {
    instance_destroy();
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mop up state and tree
{
if (!is_undefined(ruleset[RULESET.SCR_CLEANUP])) {
  script_execute(ruleset[RULESET.SCR_CLEANUP], state);
}
tree[MCTS_TREE.ROOT] = undefined;
tree = undefined;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start the game
{
// Set up the state
state = script_execute(text_gameset[TEXT_GAMESET.SCR_NEW_GAME]);
state_pickle = script_execute(ruleset[RULESET.SCR_ENCODE], state);
tree = MctsTree(state, ruleset, configs);
// Notify start of game
var current_player = script_execute(ruleset[RULESET.SCR_CURRENT_PLAYER], state)
    lflf = chr(10)+chr(10);
mh_new_game = show_message_async("New game:" + lflf + script_execute(text_gameset[TEXT_GAMESET.SCR_STATE_DISPLAY], state) + lflf + script_execute(text_gameset[TEXT_GAMESET.SCR_PLAYER_NAME], current_player) + " plays first.");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accept move
{
// Apply the move to the state
script_execute(ruleset[RULESET.SCR_APPLY_MOVE], state, move);
// Re-root the tree
var _move = array_create(1);
_move[0] = move;
mcts_reroot(tree, _move);
// Reset recommendations
recommendation = "";
// Ask for the next move
event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ask for moves unless the game is finished
{
// Not over, ask for a move
if (!script_execute(ruleset[RULESET.SCR_IS_FINAL], state)) {
  // Determine the current player's agency and find a move
  current_player = script_execute(ruleset[RULESET.SCR_CURRENT_PLAYER], state);
  current_agency = script_execute(text_gameset[TEXT_GAMESET.SCR_AGENCY], current_player);
  move = undefined;
  input = "";
  switch (current_agency) {
    // Tree
    case TEXT_GAMESET_AGENCY.MAIN_TREE:
      evaluation_daemon = mcts_evaluate_in_background(tree, max_playout_plies, max_playout_ms, max_eval_playouts, max_eval_ms);
    break;
    // Player input
    case TEXT_GAMESET_AGENCY.USER_INPUT:
      var available_moves = script_execute(ruleset[RULESET.SCR_GENERATE_MOVES], state);
      if (array_length_1d(available_moves) == 1) {
        recommendation = script_execute(text_gameset[TEXT_GAMESET.SCR_MOVE_OUTPUT], available_moves[0]);
      }
      ih_input = get_string_async(script_execute(text_gameset[TEXT_GAMESET.SCR_STATE_DISPLAY], state) + chr(10) + chr(10) + "Move for " + script_execute(text_gameset[TEXT_GAMESET.SCR_PLAYER_NAME], current_player) + ":", recommendation);
    break;
    // Script
    default:
      move = script_execute(current_agency, state);
      event_user(1);
      break;
  }
}
// Game over, clean up and announce results
else {
  // Announce results
  mh_winner = show_message_async(script_execute(text_gameset[TEXT_GAMESET.SCR_STATE_DISPLAY], state) + chr(10) + chr(10) + script_execute(text_gameset[TEXT_GAMESET.SCR_PLAYOUT_COMMENT], script_execute(ruleset[RULESET.SCR_PLAYOUT_RESULT], state)));
  // Clean up
  if (!is_undefined(ruleset[RULESET.SCR_CLEANUP])) {
    script_execute(ruleset[RULESET.SCR_CLEANUP], state);
  }
  tree[MCTS_TREE.ROOT] = undefined;
  tree = undefined;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check main tree daemon
{
if (instance_exists(evaluation_daemon)) {
  draw_healthbar(x, y, x+100, y+8, 100*evaluation_daemon.progress, c_black, c_white, c_white, 0, true, true);
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check hint tree daemon
{
if (instance_exists(hint_evaluation_daemon)) {
  draw_healthbar(x, y, x+100, y+8, 100*hint_evaluation_daemon.progress, c_black, c_white, c_white, 0, true, true);
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
